user  nobody nobody;

#include /etc/nginx/sites-enabled/*.conf;
#server_names_hash_bucket_size 64;

#--Should be as per the number of cores----
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;

# only log errors
error_log  /var/log/nginx/error.log warn;
#error_log  /var/log/nginx/error.log debug;
error_log  /var/log/nginx/error.log notice;
error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;
#pid        /run/nginx.pid; #devendra


# provides the configuration file context in which the directives that affect connection processing are specified.
events { 

   # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    #worker_connections  1024;
    worker_connections 4000;

    # optmized to serve many clients with each thread, essential for linux  (devendra)
    #  use epoll;

    # accept as many connections as possible, may flood worker connections if set too low (devendra)
   # multi_accept on;
    
} 


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile        on;
    #tcp_nopush     on;


    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;


   # server will close connection after this time 
   keepalive_timeout  1;
   #keepalive_timeout  650; #devendra
    
    # number of requests client can make over keep-alive -- for testing
    keepalive_requests 100000;

   
    # allow the server to close connection on non responding client, this will free up memory
     #reset_timedout_connection on; #devendra

    # request timed out -- default 60
    client_body_timeout 30; #devendra
    client_max_body_size 2G;

    # if client stop responding, free up memory -- default 60
     #send_timeout 2; #devendra


    # reduce the data that needs to be sent over network
    gzip on;
    gzip_vary on;
    #gzip_min_length 10240;
    #gzip_proxied expired no-cache no-store private auth;
    gzip_proxied any;  
    #gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/css image/png image/gif image/jpeg image/jpg ;
	gzip_types
   	 text/plain
   	 text/css
    	 text/js
    	 text/xml
   	 text/javascript
	 image/png
	 image/jpeg
	 image/jpg
	 images/gif
   	 application/javascript
   	 application/x-javascript
    	 application/json
   	 application/xml
   	 application/rss+xml
   	 image/svg+xml;

    gzip_disable "MSIE [1-6]\.";

    server {
        listen       80;
       # server_name  localhost czchat.trixchat.com;
      server_name  localhost ;
	
	charset utf-8;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        root /var/www/html;

        location / {
        #    root   html;
            index  index.php index.html index.htm adminui.php;
            server_tokens  off;
        # Override some buffer limitations, will prevent DDOS too.
	   # client_body_timeout 30;
            #  client_max_body_size 10M;
            client_body_buffer_size 128k;
            #client_header_buffer_size 128k;
            #large_client_header_buffers 200k;    
        }

        error_page  404              /404NotFound.php;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            #root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000

        location ~ \.php$ {
            #root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /var/www/html/$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        # to boost IO on HDD we can disable access logs
        location ~ /\.ht {
            deny  all;
        }
        location ~ /\. {
            deny  all;
        }
        #
        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
                access_log        off;
                log_not_found     off;
                expires           360d;
        }

        location ~ /\. {
                access_log off;
                log_not_found off;
                deny all;
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


#    HTTPS server
    
#    server {
#        listen       488 ssl;
#        server_name  localhost czchat.trixchat.com;
#       root /var/www/html;
#    ssl_certificate /etc/letsencrypt/live/czchat.trixchat.com/fullchain.pem; # managed by Certbot
#    ssl_certificate_key /etc/letsencrypt/live/czchat.trixchat.com/privkey.pem; # managed by Certbot

#        ssl_session_cache    shared:SSL:1m;
#        ssl_session_timeout  5m;

#        ssl_ciphers  HIGH:!aNULL:!MD5;
#        ssl_prefer_server_ciphers  on;

#        location / {
            #root   html;
#            index  index.php index.html index.htm;
#        }

#        location ~ \.php$ {
#           root           html;
#            fastcgi_pass   127.0.0.1:9000;
#            fastcgi_index  index.php;
#            fastcgi_param  SCRIPT_FILENAME  /var/www/html/$fastcgi_script_name;
#            include        fastcgi_params;
#        }

    
#}

}
